import type { NextPage } from 'next';
import { useState, useEffect, FormEvent } from 'react';
import DashboardLayout from '../../../components/layout/DashboardLayout';
import { ProductData } from '../../../lib/types'; // Import ProductData

// Initial state for the new product form (assetId and id are generated by backend)
const initialProductFormState: Omit<ProductData, 'id' | 'assetId'> = {
  productName: '',
  description: '',
  price: 0.00,
  quantityAvailable: 0,
  taxName: '',
  taxRate: 0,
  photoUrl: '',
};

const ProductsPage: NextPage = () => {
  const [products, setProducts] = useState<ProductData[]>([]);
  const [newProduct, setNewProduct] = useState<Omit<ProductData, 'id' | 'assetId'>>(initialProductFormState);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [notification, setNotification] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  // Fetch initial list of products
  const fetchProducts = async () => {
    setIsLoading(true);
    setNotification(null);
    try {
      const response = await fetch('/api/owner/products');
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `API Error: ${response.status}`);
      }
      const data: ProductData[] = await response.json();
      setProducts(data);
    } catch (error) {
      console.error('Failed to fetch products:', error);
      const message = error instanceof Error ? error.message : 'Failed to load products.';
      setNotification({ type: 'error', message });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    // Handle number conversion carefully
    const isNumberField = ['price', 'quantityAvailable', 'taxRate'].includes(name);
    setNewProduct(prev => ({
      ...prev,
      [name]: isNumberField ? (value === '' ? '' : parseFloat(value)) : value,
    }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      console.log('File selected for upload (mock):', e.target.files[0].name);
      // Mocking file handling: In a real app, this would involve uploading the file
      // and getting back a URL, or embedding as base64, etc.
      setNewProduct(prev => ({ ...prev, photoUrl: `mock/path/to/${e.target.files![0].name}` }));
    }
  };

  const handleAddProductSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!newProduct.productName || (typeof newProduct.price === 'string' ? parseFloat(newProduct.price) : newProduct.price) <= 0) {
      setNotification({type: 'error', message: "Product Name and a valid Price are required."});
      setTimeout(() => setNotification(null), 3000);
      return;
    }

    setIsSaving(true);
    setNotification(null);

    // Prepare data for API, ensuring numeric types are correct
    const payload = {
        ...newProduct,
        price: typeof newProduct.price === 'string' ? parseFloat(newProduct.price) : newProduct.price,
        quantityAvailable: typeof newProduct.quantityAvailable === 'string' ? parseInt(newProduct.quantityAvailable, 10) : newProduct.quantityAvailable,
        taxRate: newProduct.taxRate ? (typeof newProduct.taxRate === 'string' ? parseFloat(newProduct.taxRate) : newProduct.taxRate) : undefined,
    };

    try {
      const response = await fetch('/api/owner/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();

      if (!response.ok || response.status !== 201) { // Check for 201 Created status
        throw new Error(responseData.message || `API Error: ${response.status}`);
      }

      setProducts(prevProducts => [responseData, ...prevProducts]); // Add new product from API to the top
      setNewProduct(initialProductFormState); // Reset form
      setShowAddForm(false); // Hide form
      setNotification({ type: 'success', message: `Product "${responseData.productName}" added successfully!` });
      console.log('Product added via API:', responseData);

    } catch (error) {
      console.error('Failed to add product:', error);
      const message = error instanceof Error ? error.message : 'Failed to add product.';
      setNotification({ type: 'error', message });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <DashboardLayout pageTitle="Product Management">
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-800">Product Management</h1>
          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition ease-in-out duration-150"
          >
            {showAddForm ? 'Cancel' : '+ Add New Product'}
          </button>
        </div>

        {notification && (
          <div className={`p-3 mb-4 rounded-md text-sm ${notification.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {notification.message}
          </div>
        )}

        {showAddForm && (
          <div className="bg-white p-8 rounded-lg shadow-xl mb-10">
            <h2 className="text-2xl font-semibold mb-6 text-gray-700">Add New Product</h2>
            <form onSubmit={handleAddProductSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="productName" className="block text-sm font-medium text-gray-700 mb-1">Product Name <span className="text-red-500">*</span></label>
                  <input type="text" name="productName" id="productName" value={newProduct.productName} onChange={handleInputChange} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"/>
                </div>
                <div>
                  <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-1">Price <span className="text-red-500">*</span></label>
                  <input type="number" name="price" id="price" value={newProduct.price} onChange={handleInputChange} required min="0.01" step="0.01" className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"/>
                </div>
              </div>
              <div>
                <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea name="description" id="description" value={newProduct.description || ''} onChange={handleInputChange} rows={4} className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"></textarea>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="quantityAvailable" className="block text-sm font-medium text-gray-700 mb-1">Quantity Available</label>
                  <input type="number" name="quantityAvailable" id="quantityAvailable" value={newProduct.quantityAvailable} onChange={handleInputChange} min="0" step="1" className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"/>
                </div>
                 <div>
                  <label htmlFor="photoUrl" className="block text-sm font-medium text-gray-700 mb-1">Product Photo</label>
                  <input type="file" name="photoUrlInput" id="photoUrlInput" onChange={handleFileChange} accept="image/*" className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
                  {newProduct.photoUrl && <p className="text-xs text-gray-500 mt-1">Mock path: {newProduct.photoUrl}</p>}
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="taxName" className="block text-sm font-medium text-gray-700 mb-1">Tax Name (e.g., VAT)</label>
                  <input type="text" name="taxName" id="taxName" value={newProduct.taxName || ''} onChange={handleInputChange} className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"/>
                </div>
                <div>
                  <label htmlFor="taxRate" className="block text-sm font-medium text-gray-700 mb-1">Tax Rate (%)</label>
                  <input type="number" name="taxRate" id="taxRate" value={newProduct.taxRate || ''} onChange={handleInputChange} min="0" step="0.01" placeholder="e.g., 20 for 20%" className="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"/>
                </div>
              </div>
              <div className="flex justify-end pt-4 border-t border-gray-200 mt-6">
                <button type="button" onClick={() => { setShowAddForm(false); setNotification(null); }} className="mr-3 py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Cancel
                </button>
                <button type="submit" disabled={isSaving} className="py-2 px-6 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-400">
                  {isSaving ? 'Adding...' : 'Add Product'}
                </button>
              </div>
            </form>
          </div>
        )}

        <div className="bg-white p-8 rounded-lg shadow-xl">
          <h2 className="text-2xl font-semibold mb-6 text-gray-700">Your Products</h2>
          {isLoading ? (
            <p className="text-gray-600 text-center py-4">Loading products...</p>
          ) : products.length === 0 ? (
            <p className="text-gray-600 text-center py-4">No products found. Add your first product above!</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Asset ID</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {products.map((product) => (
                    <tr key={product.id || product.assetId}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{product.assetId}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{product.productName}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${typeof product.price === 'number' ? product.price.toFixed(2) : 'N/A'}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{product.quantityAvailable}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button className="text-indigo-600 hover:text-indigo-900 mr-3 disabled:text-gray-400" disabled>Edit</button> {/* Placeholder */}
                        <button className="text-red-600 hover:text-red-900 disabled:text-gray-400" disabled>Delete</button> {/* Placeholder */}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </DashboardLayout>
  );
};

export default ProductsPage;
